---
title: "Phytopathometry"
editor_options: 
  chunk_output_type: console
---

```{r include = FALSE}
knitr::opts_knit$set(root.dir = "imgs")
```

# Directory

```{r eval=FALSE}
setwd("imgs")
getwd()
```

# Disease severity

# Using image indexes

The following image[^1] shows symptoms of anthracnose (*Elsinoë ampelina*) on grape leaves.

[^1]: Fonte: <http://gazeta-rs.com.br/as-principais-doencas-da-videira-na-primavera/#prettyPhoto>

```{r}
#| warning: false
#| message: false

library(pliman)
library(tidyverse)
img <- image_import("videira.png", plot = TRUE)
sev <- 
  measure_disease(img,
                  index_lb = "G",
                  index_dh = "G-R",
                  show_segmentation = TRUE)
sev$severity
```



# Using sample palettes

Sample palettes can be made by simply manually sampling small areas of representative images and producing a composite image that will represent each of the desired classes (background, healthy, and symptomatic tissues).

```{r doença1, fig.width = 12, fig.height = 3}
h <- image_import("videira_h.png")
d <- image_import("videira_d.png")
b <- image_import("videira_b.png")
image_combine(img, h, d, b, ncol = 4)
```

## Producing sample palettes

Users can produce these palettes with `pick_palette()` function.

```{r eval=FALSE, fig.width=10}
h2 <- pick_palette(img)
d2 <- pick_palette(img)
b2 <- pick_palette(img)
image_combine(h2, d2, b2, ncol = 3)

```

### Defaults settings

```{r}
sev <- 
  measure_disease(img = img,
                  img_healthy = h,
                  img_symptoms = d,
                  img_background = b)
sev$severity

```

### Filling lesions

```{r}
sev <- 
  measure_disease(img = img,
                  img_healthy = h,
                  img_symptoms = d,
                  img_background = b,
                  show_contour = FALSE)
```

### Showing a mask

```{r}
sev <- 
  measure_disease(img = img,
                  img_healthy = h,
                  img_symptoms = d,
                  img_background = b,
                  show_original = FALSE,
                  col_lesions = "brown") # default is "black"
```

### Segmenting and analyzing lesions

When using `show_features = TRUE`, the function analyzes the lesions and returns results such as number of lesions, area, perimeter, etc. With `show_segmentation = TRUE`, segmented lesions are shown.

```{r}
sev <- 
  measure_disease(img = img,
                  img_healthy = h,
                  img_symptoms = d,
                  img_background = b,
                  show_features = TRUE,
                  watershed = TRUE,
                  show_segmentation = TRUE)

# correct the measures (dpi = 150)
sev_corrected <- get_measures(sev, dpi = 150)
```

# Batch processing

To analyze several images from a directory, use the `pattern` argument to declare a pattern of filenames. Here, we Will used 50 soybean leaves available in the repository https://osf.io/4hbr6, a database of images of annotation of severity of plant diseases. Thanks to [Emerson M. Del Ponte](https://osf.io/jb6yd/) and his contributors for keeping this project publicly available. Using the `save_image = TRUE` argument we save the processed images in a temporary directory, defined by `tempdir()`.

```{r}
# criar um diretório temporário
temp_dir <- tempdir()

system.time(
  sev_lote <- 
    measure_disease(pattern = "soy",
                    img_healthy = "soja_h",
                    img_symptoms = "soja_s",
                    img_background = "soja_b",
                    show_image = FALSE,
                    save_image = TRUE,
                    dir_processed = temp_dir,
                    show_contour = FALSE,
                    col_lesions = "brown")
)
sev_lote$severity
```

# Standard area diagrams

Standard area diagrams (SAD) have long been used as a tool to aid the estimation of plant disease severity, serving as a standard reference template before or during the assessments. Given an object computed with `measure_disease()` a Standard Area Diagram (SAD) with `n` images containing the respective severity values are obtained with `sad()`.

Leaves with the smallest and highest severity will always be in the SAD. If `n = 1`, the leaf with the smallest severity will be returned. The others are sampled sequentially to achieve the n images after severity has been ordered in ascending order. For example, if there are 30 leaves and n is set to 3, the leaves sampled will be the 1st, 15th, and 30th with the smallest severity values.

The SAD can be only computed if an image pattern name is used in argument `pattern` of `measure_disease()`. If the images are saved, the `n` images will be retrevied from `dir_processed` directory. Otherwise, the severity will be computed again to generate the images. A SAD with 8 images from the above example can be obtained easely with:

```{r}
sad(sev_lote, n = 9, ncol = 3)
```

# Parallel processing

To speed up processing time when multiple images are available, you can use the `paralell` argument. In parallel programming (`parallel = TRUE`), the images are processed asynchronously (in parallel) in separate R sessions running in the background on the same machine. The number of sections is set by default to 50% of available cores. This number can be controlled explicitly with the argument workers.

```{r}
system.time(
  sev_lote <- 
    measure_disease(pattern = "soy",
                    img_healthy = "soja_h",
                    img_symptoms = "soja_s",
                    img_background = "soja_b",
                    show_image = FALSE,
                    parallel = TRUE)
)


```

# Multiple images of the same sample

If users need to analyze multiple images from the same sample, the images from the same sample must share the same filename prefix, which is defined as the part of the filename that precedes the first hyphen (`-`) or underscore (`_`).

In the following example, 16 images will be used as examples. Here, they represent four replicates of four different treatments (`TRAT1_1, TRAT1_2, ..., TRAT4_4`). Note that to ensure that all images are processed, all images must share a common pattern, in this case (`"TRAT"`).

```{r}
system.time(
  sev_trats <- 
    measure_disease(pattern = "TRAT",
                    img_healthy = "feijao_h",
                    img_symptoms = "feijao_s",
                    img_background = "feijao_b",
                    show_features = TRUE,
                    show_image = FALSE,
                    parallel = TRUE)
)
sev <- 
  sev_trats$severity |> 
  separate_col(img, into = c("TRAT", "REP"))


ggplot(sev, aes(TRAT, symptomatic))+
  geom_boxplot() +
  geom_jitter(alpha = 0.3) +
  labs(x = "Tratamentos",
       y = "Severidade (%)")
```

# Multiple leaves in one image

When multiple leaves are present in an image, the `measure_disease` function returns the average severity of the leaves present in the image. To quantify the severity *per leaf*, the `measure_disease_byl()` function can be used.

This function computes the percentage of symptomatic leaf area using color palettes or RGB indices for each leaf (`byl`) of an image. This allows, for example, to process replicates of the same treatment and obtain the results of each replication with a single image. To do this, the sample sheets are first split using the `object_split()` function and then the `measure_disease()` function is applied to the sheet list.

```{r}
byl <- 
  measure_disease_byl(pattern = "multiplas_02",
                      index = "B", # used to segment leaves from background
                      img_healthy = "soja_h",
                      img_symptoms = "soja_s",
                      show_contour = FALSE,
                      show_features = TRUE,
                      col_lesions = "red",
                      parallel = TRUE)

results_byl <- get_measures(byl)

results_byl$results |> 
  head()
```

# More than two classes
```{r}
img <- image_pliman("sev_leaf.jpg")
image_segment_iter(img,
                   nseg = 3,
                   index = c("B", "NGRDI", "G-B"),
                   ncol = 4)
```


# A little gift

```{r}
fungo <- image_import("fungo.jpeg", plot = TRUE)
res <- 
  analyze_objects(fungo, 
                  index = "HUE",
                  invert = TRUE,
                  filter = 5,
                  watershed = FALSE,
                  contour_size = 6)
get_measures(res, dpi = 90) |> 
  plot_measures(measure = "area", 
                col = "black",
                size = 2)
```

::: callout-tip
The segmentation can also be performed using sample palettes representing the foreground and background. In this example, pick the color samples, then use them in the `analyze_objects()`.

```{r eval=FALSE}

back <- pick_palette(fungo)
fore <- pick_palette(fungo)

res <- 
  analyze_objects(fungo,
                  background = back,
                  foreground = fore,
                  watershed = FALSE,
                  filter = 5,
                  contour_size = 6)

meas <- get_measures(res, dpi = 90)
plot_measures(meas,
              col = "black",
              measure = "area",
              size = 2)
```
:::
